#!/usr/bin/env node
console.log("Running test bailout");

var fs = require("fs");
var multi = require("../lib/testem-multi");
var config = JSON.parse(fs.readFileSync("./testem-multi.json"));
config.bailOut = true;
multi.exec(config);

var messages = [];
var notOk = [];
var ok = [];
var bail = [];
multi.on("data", function (message) {
	if (message.indexOf("# Executing") === 0) {
		messages.push(message);
	} else if (message.indexOf("not ok") === 0) {
		notOk.push(message);
	} else if (message.indexOf("ok ") === 0) {
		ok.push(message);
	} else if (message.indexOf("# BAILED OUT") === 0) {
		bail.push(message);
	}
});
multi.on("exit", function (text, details) {
	if (messages.length !== 1) {
		console.error("Expecting only 1 test messages before bailout, got", messages.length, messages);
		process.exit(1);
	} else if (notOk.length !== 4) {
		console.error("Expecting 4 not ok tests, got", notOk.length, notOk);
		process.exit(10);
	} else if (ok.length !== 4) {
		console.error("Expecting 4 ok tests, got", ok.length, ok);
		process.exit(10);
	} else if (bail.length !== 2) {
		console.error("Expecting 2 bailed out tests, got", bail.length, bail);
		process.exit(10);
	} else if (!matchExpectedOutput(text)) {
		console.error("Expecting failures only from the first test, got", text);
		process.exit(2);
	} else if (!matchExpectedDetails(details)) {
		console.error("Expecting a detail object, got", details);
		process.exit(3);
	} else {
		// All test pass
		process.exit(0);
	}
});

function matchExpectedOutput (out) {
	return out.indexOf("# tests 8") !== -1 &&
		out.indexOf("# pass 4") !== -1 &&
		out.indexOf("# fail 4") !== -1 &&
		out.match(/\nok /g).length === 4 &&
		out.match(/\nnot ok /g).length === 4;
}

function matchExpectedDetails (details) {
	return details.tests === 8 && details.pass === 4 && details.fail === 4 &&
		details.test.length === 8 && details.ok.length === 4 && details.not.length === 4;
}